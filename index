{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Numpy教程"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    ">整理：郑琳怡 <br />\n",
    ">指导老师：张永和 <br />\n",
    ">参考书籍：《基于Python的大数据分析基础及实战》"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>目录<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Numpy教程\" data-toc-modified-id=\"Numpy教程-1\">Numpy教程</a></span><ul class=\"toc-item\"><li><span><a href=\"#1.-什么是Numpy\" data-toc-modified-id=\"1.-什么是Numpy-1.1\">1. 什么是Numpy</a></span></li><li><span><a href=\"#2.-什么是Pandas\" data-toc-modified-id=\"2.-什么是Pandas-1.2\">2. 什么是Pandas</a></span></li><li><span><a href=\"#3.-Pandas中的数据结构\" data-toc-modified-id=\"3.-Pandas中的数据结构-1.3\">3. Pandas中的数据结构</a></span><ul class=\"toc-item\"><li><span><a href=\"#3.1-Series\" data-toc-modified-id=\"3.1-Series-1.3.1\">3.1 Series</a></span></li><li><span><a href=\"#3.2-DataFrame\" data-toc-modified-id=\"3.2-DataFrame-1.3.2\">3.2 DataFrame</a></span></li></ul></li><li><span><a href=\"#4.-数据导入\" data-toc-modified-id=\"4.-数据导入-1.4\">4. 数据导入</a></span><ul class=\"toc-item\"><li><span><a href=\"#4.1-导入txt文件\" data-toc-modified-id=\"4.1-导入txt文件-1.4.1\">4.1 导入txt文件</a></span></li><li><span><a href=\"#4.2-导入csv文件\" data-toc-modified-id=\"4.2-导入csv文件-1.4.2\">4.2 导入csv文件</a></span></li><li><span><a href=\"#4.3-导入Excel文件\" data-toc-modified-id=\"4.3-导入Excel文件-1.4.3\">4.3 导入Excel文件</a></span></li><li><span><a href=\"#4.4-导入MySQL库\" data-toc-modified-id=\"4.4-导入MySQL库-1.4.4\">4.4 导入MySQL库</a></span></li></ul></li><li><span><a href=\"#5.-数据导出\" data-toc-modified-id=\"5.-数据导出-1.5\">5. 数据导出</a></span><ul class=\"toc-item\"><li><span><a href=\"#5.1-导出csv文件\" data-toc-modified-id=\"5.1-导出csv文件-1.5.1\">5.1 导出csv文件</a></span></li><li><span><a href=\"#5.2-导出Excel文件\" data-toc-modified-id=\"5.2-导出Excel文件-1.5.2\">5.2 导出Excel文件</a></span></li><li><span><a href=\"#5.3-导出到MySQL库\" data-toc-modified-id=\"5.3-导出到MySQL库-1.5.3\">5.3 导出到MySQL库</a></span></li></ul></li><li><span><a href=\"#6.-数据清洗\" data-toc-modified-id=\"6.-数据清洗-1.6\">6. 数据清洗</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1重复值处理\" data-toc-modified-id=\"6.1重复值处理-1.6.1\">6.1重复值处理</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1.1-判断是否重复\" data-toc-modified-id=\"6.1.1-判断是否重复-1.6.1.1\">6.1.1 判断是否重复</a></span></li><li><span><a href=\"#6.1.2-去掉行重复的数据\" data-toc-modified-id=\"6.1.2-去掉行重复的数据-1.6.1.2\">6.1.2 去掉行重复的数据</a></span></li></ul></li><li><span><a href=\"#6.2-缺失值处理\" data-toc-modified-id=\"6.2-缺失值处理-1.6.2\">6.2 缺失值处理</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-识别缺失值\" data-toc-modified-id=\"6.2.1-识别缺失值-1.6.2.1\">6.2.1 识别缺失值</a></span></li><li><span><a href=\"#6.2.2-处理缺失值\" data-toc-modified-id=\"6.2.2-处理缺失值-1.6.2.2\">6.2.2 处理缺失值</a></span></li></ul></li></ul></li><li><span><a href=\"#7.-数据抽取\" data-toc-modified-id=\"7.-数据抽取-1.7\">7. 数据抽取</a></span><ul class=\"toc-item\"><li><span><a href=\"#7.1-字段抽取\" data-toc-modified-id=\"7.1-字段抽取-1.7.1\">7.1 字段抽取</a></span></li><li><span><a href=\"#7.2-字段拆分\" data-toc-modified-id=\"7.2-字段拆分-1.7.2\">7.2 字段拆分</a></span></li><li><span><a href=\"#7.3-重置索引\" data-toc-modified-id=\"7.3-重置索引-1.7.3\">7.3 重置索引</a></span></li><li><span><a href=\"#7.4-记录抽取\" data-toc-modified-id=\"7.4-记录抽取-1.7.4\">7.4 记录抽取</a></span></li><li><span><a href=\"#7.5-随机抽样\" data-toc-modified-id=\"7.5-随机抽样-1.7.5\">7.5 随机抽样</a></span></li><li><span><a href=\"#7.6-通过索引抽取数据\" data-toc-modified-id=\"7.6-通过索引抽取数据-1.7.6\">7.6 通过索引抽取数据</a></span><ul class=\"toc-item\"><li><span><a href=\"#7.6.1-通过索引名（标签）抽取\" data-toc-modified-id=\"7.6.1-通过索引名（标签）抽取-1.7.6.1\">7.6.1 通过索引名（标签）抽取</a></span></li><li><span><a href=\"#7.6.2-使用索引号抽取\" data-toc-modified-id=\"7.6.2-使用索引号抽取-1.7.6.2\">7.6.2 使用索引号抽取</a></span></li></ul></li><li><span><a href=\"#7.7-字典数据抽取\" data-toc-modified-id=\"7.7-字典数据抽取-1.7.7\">7.7 字典数据抽取</a></span></li></ul></li><li><span><a href=\"#8.-插入记录\" data-toc-modified-id=\"8.-插入记录-1.8\">8. 插入记录</a></span><ul class=\"toc-item\"><li><span><a href=\"#8.1-方法一\" data-toc-modified-id=\"8.1-方法一-1.8.1\">8.1 方法一</a></span></li><li><span><a href=\"#8.2-方法二\" data-toc-modified-id=\"8.2-方法二-1.8.2\">8.2 方法二</a></span></li><li><span><a href=\"#8.3-方法三\" data-toc-modified-id=\"8.3-方法三-1.8.3\">8.3 方法三</a></span></li></ul></li><li><span><a href=\"#9.1-修改记录\" data-toc-modified-id=\"9.1-修改记录-1.9\">9.1 修改记录</a></span><ul class=\"toc-item\"><li><span><a href=\"#9.1-整体替换\" data-toc-modified-id=\"9.1-整体替换-1.9.1\">9.1 整体替换</a></span></li><li><span><a href=\"#9.2-个别替换\" data-toc-modified-id=\"9.2-个别替换-1.9.2\">9.2 个别替换</a></span><ul class=\"toc-item\"><li><span><a href=\"#9.2.1-单值替换\" data-toc-modified-id=\"9.2.1-单值替换-1.9.2.1\">9.2.1 单值替换</a></span></li><li><span><a href=\"#9.2.2-指定列单值替换\" data-toc-modified-id=\"9.2.2-指定列单值替换-1.9.2.2\">9.2.2 指定列单值替换</a></span></li><li><span><a href=\"#9.2.3-多值替换\" data-toc-modified-id=\"9.2.3-多值替换-1.9.2.3\">9.2.3 多值替换</a></span></li></ul></li></ul></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "******"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 什么是Numpy\n",
    "\n",
    "Numpy的数据结构是n维的数组对象，叫做ndarray。<br />\n",
    "Numpy的一个重要特性是它的数组计算。<br />\n",
    "Python的列表也能表示数组，但随着列表数据的增加，效率会降低。<br />\n",
    "Numpy是Python的一个很重要的第三方库，很多其他科学计算的第三方库都是以Numpy为基础建立的。使用Anaconda则无须另外安装Numpy。\n",
    "\n",
    "在使用Numpy之前，我们需要导入numpy包："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 其中as表示命名为别名，目的是调用方便，如np是Numpy约定俗成的简写。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "使用前一定要先导入 Numpy 包，导入的方法有以下几种："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "import numpy as np\n",
    "from numpy import *\n",
    "from numpy import array, sin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas import Series,DataFrame\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 什么是Pandas\n",
    "\n",
    "pandas 是基于 Numpy 构建的含有更高级数据结构和工具的数据分析包。\n",
    "\n",
    "Pandas的名称来源于面板数据（Panel Data）和Python数据分析（Data Analysis）。Panel Data是经济学中关于多维数据集的一个术语，在Pandas中也提供了Panel Data的数据类型。\n",
    "\n",
    "pandas 约定俗成的导入方法如下："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Pandas中的数据结构\n",
    "\n",
    "类似于 Numpy 的核心是 ndarray，pandas 也是围绕着 Series 和 DataFrame 两个核心数据结构展开的 。这两种数据结构都是建立在Numpy的基础之上的。\n",
    "\n",
    "Pandas有以下三种数据类型，我们主要介绍前两种。\n",
    "\n",
    "1. Series：一维数组系列，也称序列。与Numpy中的一维array类似。两者与Python基本的数据结构list也很相近。\n",
    "2. DataFrame：二维的表格型数据结构。可以将DataFrame理解为Series的容器。\n",
    "3. Panel：三维数组，可以理解为DataFrame的容器\n",
    "\n",
    "### 3.1 Series\n",
    "\n",
    "\n",
    "\n",
    "### 3.2 DataFrame\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. 数据导入\n",
    "\n",
    "### 4.1 导入txt文件\n",
    "\n",
    "### 4.2 导入csv文件\n",
    "\n",
    "### 4.3 导入Excel文件\n",
    "\n",
    "### 4.4 导入MySQL库"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. 数据导出\n",
    "\n",
    "### 5.1 导出csv文件\n",
    "\n",
    "### 5.2 导出Excel文件\n",
    "\n",
    "### 5.3 导出到MySQL库"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. 数据清洗\n",
    "\n",
    "在数据分析时，海量的原始数据中存在着大量不完整、不一致、有异常的数据，严重影响到数据分析的结果，因此进行数据清洗就显得尤为重要。\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.1重复值处理\n",
    "\n",
    "series list dict dataframe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import Series\n",
    "df=DataFrame({'name':Series(['Amy','John','Jason','Peter','Jason','Jason']),'age':Series([10,45,11,23,45,45])},index=[0,1,2,3,4,5])\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.1.1 判断是否重复"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "方法：duplicated()："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "3    False\n",
       "4    False\n",
       "5     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#没有参数，默认判断全部列\n",
    "df.duplicated()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "3    False\n",
       "4     True\n",
       "5     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#参数为属性名（列名），则对该列进行重复项的判断\n",
    "df.duplicated(['name'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.1.2 去掉行重复的数据"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "只保留一行：drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#去掉age列中数据重复的行\n",
    "df.drop_duplicates('name')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6.2 缺失值处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>NaN</td>\n",
       "      <td>98.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>5.0</td>\n",
       "      <td>87.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>3.0</td>\n",
       "      <td>65.3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>23.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>4.0</td>\n",
       "      <td>66.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>6.0</td>\n",
       "      <td>88.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  name   age  score  time\n",
       "0   小马   1.0    NaN   NaN\n",
       "1  NaN   NaN    NaN   NaN\n",
       "2   小丽   NaN   96.0   NaN\n",
       "3   小鸡   NaN   98.1   NaN\n",
       "4   小鸭   5.0   87.1   NaN\n",
       "5   小鹏   3.0   65.3   NaN\n",
       "6   小图  23.0   65.8   NaN\n",
       "7   小猫   4.0   66.8   NaN\n",
       "8   小狗   6.0   88.6   NaN"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import read_excel\n",
    "df=read_excel(r'/root/brainwaveDetail.xls',sheet_name='Sheet1')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.2.1 识别缺失值"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "两个方法：isnull()；notnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    age  score  time\n",
       "0  False  False   True  True\n",
       "1   True   True   True  True\n",
       "2  False   True  False  True\n",
       "3  False   True  False  True\n",
       "4  False  False  False  True\n",
       "5  False  False  False  True\n",
       "6  False  False  False  True\n",
       "7  False  False  False  True\n",
       "8  False  False  False  True"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    age  score   time\n",
       "0   True   True  False  False\n",
       "1  False  False  False  False\n",
       "2   True  False   True  False\n",
       "3   True  False   True  False\n",
       "4   True   True   True  False\n",
       "5   True   True   True  False\n",
       "6   True   True   True  False\n",
       "7   True   True   True  False\n",
       "8   True   True   True  False"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.notnull()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.2.2 处理缺失值"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1、删除对应行 2、数据补齐 3、不处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#删除有缺失值的行\n",
    "# df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>score</th>\n",
       "      <th>time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>NaN</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>NaN</td>\n",
       "      <td>98.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>5.0</td>\n",
       "      <td>87.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>3.0</td>\n",
       "      <td>65.3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>23.0</td>\n",
       "      <td>65.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>4.0</td>\n",
       "      <td>66.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>6.0</td>\n",
       "      <td>88.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  name   age  score  time\n",
       "0   小马   1.0    NaN   NaN\n",
       "2   小丽   NaN   96.0   NaN\n",
       "3   小鸡   NaN   98.1   NaN\n",
       "4   小鸭   5.0   87.1   NaN\n",
       "5   小鹏   3.0   65.3   NaN\n",
       "6   小图  23.0   65.8   NaN\n",
       "7   小猫   4.0   66.8   NaN\n",
       "8   小狗   6.0   88.6   NaN"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#删除行里数据全部为空的行\n",
    "df.dropna(how='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#删除数据全都为空的列（默认axis=0，表示行。1表示列）\n",
    "df.dropna(how='all',axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "补齐数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#使用数值或任意字符代替NaN\n",
    "df.fillna('?')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#使用(该列）前一个数据代替NaN   \n",
    "df.fillna(method='bfill')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#使用(该列）后一个数据代替NaN\n",
    "df.fillna(method='bfill')\n",
    "df.fillna(method='bfill',limit=1)  #limit限制每列可以替代NaN的数目"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#使用平均值或其他描述性统计量填代替NaN\n",
    "df.fillna(df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#选择某些列的均值代替NaN（！！！！！和书本说的不一样）\n",
    "df.fillna(df.mean()['score':'time'])\n",
    "# df.fillna(df.mean()['time':'age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Amy</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jason</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Peter</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Jason</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age\n",
       "0    Amy   10\n",
       "1   John   45\n",
       "2  Jason   11\n",
       "3  Peter   23\n",
       "4  Jason   45\n",
       "5  Jason   45"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#传入一个字典，对不同的列填充不同的值\n",
    "df.fillna({'name':'我是空','age':1,'time':3,'score':100})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        name  age\n",
      "0       A my   10\n",
      "1    John      45\n",
      "2      Jason   11\n",
      "3      Peter   23\n",
      "4      NasoN   45\n",
      "5      Jason   45\n"
     ]
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import Series\n",
    "df1=DataFrame({'name':Series([' A my','John   ','    Jason','Peter','NasoN','Jason']),'age':Series([10,45,11,23,45,45])},index=[0,1,2,3,4,5])\n",
    "print(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     A my\n",
      "1     John\n",
      "2    Jason\n",
      "3    Peter\n",
      "4    NasoN\n",
      "5    Jason\n",
      "Name: name, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#清除字符型数据首位指定的字符，默认删除空格，中间的不清除\n",
    "print(df1['name'].str.strip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        name  age\n",
      "0       A my   10\n",
      "1    John      45\n",
      "2      Jason   11\n",
      "3      Peter   23\n",
      "4      NasoN   45\n",
      "5      Jason   45\n",
      "0         A my\n",
      "1         John\n",
      "2        Jason\n",
      "3        Peter\n",
      "4        NasoN\n",
      "5        Jason\n",
      "Name: name, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#清除右边的字符\n",
    "print(df1)\n",
    "print(df1['name'].str.rstrip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       A my\n",
      "1    John   \n",
      "2      Jason\n",
      "3      Peter\n",
      "4      NasoN\n",
      "5      Jason\n",
      "Name: name, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#清除左边的字符\n",
    "print(df1['name'].str.lstrip())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         A my\n",
      "1      John   \n",
      "2        Jason\n",
      "3        Peter\n",
      "4         asoN\n",
      "5        Jason\n",
      "Name: name, dtype: object\n",
      "0         A my\n",
      "1      John   \n",
      "2        Jason\n",
      "3        Peter\n",
      "4         Naso\n",
      "5        Jason\n",
      "Name: name, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#清除左边的字符N\n",
    "print(df1['name'].str.lstrip('N'))\n",
    "print(df1['name'].str.rstrip('N'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. 数据抽取"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 字段抽取"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>120.12.12.12</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>120.12.12.1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话               IP          学号\n",
       "0  小马  56456456456456    120.233.111.2  2170047501\n",
       "1  小青    123123131313  120.122.110.111  2170047502\n",
       "2  小丽   1321313123123      120.144.2.1  2170047503\n",
       "3  小鸡    465464678678     120.210.2.22  2170047504\n",
       "4  小鸭    531233546467      120.111.1.4  2170047505\n",
       "5  小鹏  13456464561232     120.12.12.12  2170047506\n",
       "6  小图   1231231231231              NaN  2170047507\n",
       "7  小猫    123131231231     120.12.12.11  2170047508\n",
       "8  小狗  12313245645646      120.12.12.1  2170047509"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import read_excel\n",
    "df=read_excel(r'/root/brainwaveDetailNew.xls',sheet_name='Sheet1')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "截取字符：slice(start,stop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    小\n",
       "1    小\n",
       "2    小\n",
       "3    小\n",
       "4    小\n",
       "5    小\n",
       "6    小\n",
       "7    小\n",
       "8    小\n",
       "Name: 名字, dtype: object"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#截取名字的最后一个字\n",
    "name1=df['名字'].str.slice(0,1)\n",
    "name1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    564\n",
       "1    123\n",
       "2    132\n",
       "3    465\n",
       "4    531\n",
       "5    134\n",
       "6    123\n",
       "7    123\n",
       "8    123\n",
       "Name: 电话, dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#只能截取字符，数字要先转变为字符\n",
    "df['电话']=df['电话'].astype(str)\n",
    "name1=df['电话'].str.slice(0,3)\n",
    "# print(df)\n",
    "name1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 字段拆分"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "split('.',1,True)：按第一个\".\"分成两列，1表示新增的列数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>120</td>\n",
       "      <td>233</td>\n",
       "      <td>111.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>120</td>\n",
       "      <td>122</td>\n",
       "      <td>110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>120</td>\n",
       "      <td>144</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>120</td>\n",
       "      <td>210</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>111</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     0    1        2\n",
       "0  120  233    111.2\n",
       "1  120  122  110.111\n",
       "2  120  144      2.1\n",
       "3  120  210     2.22\n",
       "4  120  111      1.4\n",
       "5  120   12    12.12\n",
       "6  NaN  NaN      NaN\n",
       "7  120   12    12.11\n",
       "8  120   12     12.1"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF=df['IP'].str.split('.',2,True)\n",
    "newDF"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "给第1列，第2列增加列名称： .columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IP1</th>\n",
       "      <th>IP-2</th>\n",
       "      <th>IP-34</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>120</td>\n",
       "      <td>233</td>\n",
       "      <td>111.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>120</td>\n",
       "      <td>122</td>\n",
       "      <td>110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>120</td>\n",
       "      <td>144</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>120</td>\n",
       "      <td>210</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>111</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>120</td>\n",
       "      <td>12</td>\n",
       "      <td>12.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   IP1 IP-2    IP-34\n",
       "0  120  233    111.2\n",
       "1  120  122  110.111\n",
       "2  120  144      2.1\n",
       "3  120  210     2.22\n",
       "4  120  111      1.4\n",
       "5  120   12    12.12\n",
       "6  NaN  NaN      NaN\n",
       "7  120   12    12.11\n",
       "8  120   12     12.1"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF.columns=['IP1','IP-2','IP-34']\n",
    "newDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>IP-2</th>\n",
       "      <th>IP-34</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IP1</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>233</td>\n",
       "      <td>111.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>122</td>\n",
       "      <td>110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>144</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>210</td>\n",
       "      <td>2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>111</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>12</td>\n",
       "      <td>12.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaN</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>12</td>\n",
       "      <td>12.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>12</td>\n",
       "      <td>12.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    IP-2    IP-34\n",
       "IP1              \n",
       "120  233    111.2\n",
       "120  122  110.111\n",
       "120  144      2.1\n",
       "120  210     2.22\n",
       "120  111      1.4\n",
       "120   12    12.12\n",
       "NaN  NaN      NaN\n",
       "120   12    12.11\n",
       "120   12     12.1"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newDF1=newDF.set_index('IP1')\n",
    "newDF1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.3 重置索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>名字</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>小马</th>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小青</th>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小丽</th>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小鸡</th>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小鸭</th>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小鹏</th>\n",
       "      <td>13456464561232</td>\n",
       "      <td>120.12.12.12</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小图</th>\n",
       "      <td>1231231231231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小猫</th>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小狗</th>\n",
       "      <td>12313245645646</td>\n",
       "      <td>120.12.12.1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                电话               IP          学号\n",
       "名字                                             \n",
       "小马  56456456456456    120.233.111.2  2170047501\n",
       "小青    123123131313  120.122.110.111  2170047502\n",
       "小丽   1321313123123      120.144.2.1  2170047503\n",
       "小鸡    465464678678     120.210.2.22  2170047504\n",
       "小鸭    531233546467      120.111.1.4  2170047505\n",
       "小鹏  13456464561232     120.12.12.12  2170047506\n",
       "小图   1231231231231              NaN  2170047507\n",
       "小猫    123131231231     120.12.12.11  2170047508\n",
       "小狗  12313245645646      120.12.12.1  2170047509"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#将‘名字’列作为新的索引\n",
    "df1=df.set_index('名字')\n",
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "提取用户信息：ix,loc,iloc——location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df1.ix['小猫'] #废弃"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "电话       123123131313\n",
       "IP    120.122.110.111\n",
       "学号         2170047502\n",
       "Name: 小青, dtype: object"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.loc['小青']#通过索引查找"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "电话       123123131313\n",
       "IP    120.122.110.111\n",
       "学号         2170047502\n",
       "Name: 小青, dtype: object"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.iloc[1]#通过索引号查找"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.4 记录抽取"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "根据一定的条件对数据进行抽取：df[condition]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>120.12.12.12</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>120.12.12.1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话               IP          学号\n",
       "0  小马  56456456456456    120.233.111.2  2170047501\n",
       "1  小青    123123131313  120.122.110.111  2170047502\n",
       "2  小丽   1321313123123      120.144.2.1  2170047503\n",
       "3  小鸡    465464678678     120.210.2.22  2170047504\n",
       "4  小鸭    531233546467      120.111.1.4  2170047505\n",
       "5  小鹏  13456464561232     120.12.12.12  2170047506\n",
       "6  小图   1231231231231              NaN  2170047507\n",
       "7  小猫    123131231231     120.12.12.11  2170047508\n",
       "8  小狗  12313245645646      120.12.12.1  2170047509"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import read_excel\n",
    "df2=read_excel(r'/root/brainwaveDetailNew.xls',sheet_name='Sheet1')\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话             IP          学号\n",
       "0  小马  56456456456456  120.233.111.2  2170047501"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2.电话>13456464561232]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字            电话               IP          学号\n",
       "1  小青  123123131313  120.122.110.111  2170047502\n",
       "3  小鸡  465464678678     120.210.2.22  2170047504\n",
       "4  小鸭  531233546467      120.111.1.4  2170047505\n",
       "7  小猫  123131231231     120.12.12.11  2170047508"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2.电话.between(123123131313\t,531233546467)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字            电话               IP          学号\n",
       "1  小青  123123131313  120.122.110.111  2170047502\n",
       "3  小鸡  465464678678     120.210.2.22  2170047504\n",
       "4  小鸭  531233546467      120.111.1.4  2170047505\n",
       "7  小猫  123131231231     120.12.12.11  2170047508"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[(df2.电话>=123123131313)&(df2.电话<=531233546467)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字             电话   IP          学号\n",
       "6  小图  1231231231231  NaN  2170047507"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2[df2.IP.isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话             IP          学号\n",
       "0  小马  56456456456456  120.233.111.2  2170047501\n",
       "4  小鸭    531233546467    120.111.1.4  2170047505"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#抽取字符含有‘111’的，包括空的\n",
    "df2[df2.IP.str.contains('111.',na=False)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.5 随机抽样"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "随机按一定的行数或比例抽取数据\n",
    "\n",
    "numpy.random.randint(开始范围，结束范围，抽样个数)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 8 0] <class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>名字</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>小丽</th>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小狗</th>\n",
       "      <td>12313245645646</td>\n",
       "      <td>120.12.12.1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>小马</th>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                电话             IP          学号\n",
       "名字                                           \n",
       "小丽   1321313123123    120.144.2.1  2170047503\n",
       "小狗  12313245645646    120.12.12.1  2170047509\n",
       "小马  56456456456456  120.233.111.2  2170047501"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy\n",
    "r=numpy.random.randint(0,len(df1),3)\n",
    "print(r,type(r))\n",
    "df1.iloc[r,:]\n",
    "df1.iloc[r]\n",
    "# df1=df.sample(frac=0.1).iloc[0]\n",
    "# df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.6 通过索引抽取数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>学号</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2170047501</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047502</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047503</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047504</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047505</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            名字              电话               IP\n",
       "学号                                             \n",
       "2170047501  小马  56456456456456    120.233.111.2\n",
       "2170047502  小青    123123131313  120.122.110.111\n",
       "2170047503  小丽   1321313123123      120.144.2.1\n",
       "2170047504  小鸡    465464678678     120.210.2.22\n",
       "2170047505  小鸭    531233546467      120.111.1.4"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3=df.set_index('学号')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.6.1 通过索引名（标签）抽取\n",
    "\n",
    "df.loc[行标签，列标签]——两个参数可以是列表，也可以是单个字符"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>学号</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2170047502</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047503</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047504</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047505</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047506</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>120.12.12.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            名字              电话               IP\n",
       "学号                                             \n",
       "2170047502  小青    123123131313  120.122.110.111\n",
       "2170047503  小丽   1321313123123      120.144.2.1\n",
       "2170047504  小鸡    465464678678     120.210.2.22\n",
       "2170047505  小鸭    531233546467      120.111.1.4\n",
       "2170047506  小鹏  13456464561232     120.12.12.12"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#抽取多行时，行索引必须是列表形式，不能简单地用逗号隔开\n",
    "df3.loc[2170047502:2170047506]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>电话</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>学号</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2170047502</th>\n",
       "      <td>123123131313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047503</th>\n",
       "      <td>1321313123123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047504</th>\n",
       "      <td>465464678678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047505</th>\n",
       "      <td>531233546467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047506</th>\n",
       "      <td>13456464561232</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        电话\n",
       "学号                        \n",
       "2170047502    123123131313\n",
       "2170047503   1321313123123\n",
       "2170047504    465464678678\n",
       "2170047505    531233546467\n",
       "2170047506  13456464561232"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.loc[2170047502:2170047506,['电话']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 7.6.2 使用索引号抽取"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "df.iloc[行索引号，列索引号]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>IP</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>学号</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2170047502</th>\n",
       "      <td>小青</td>\n",
       "      <td>120.122.110.111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047503</th>\n",
       "      <td>小丽</td>\n",
       "      <td>120.144.2.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2170047504</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>120.210.2.22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            名字               IP\n",
       "学号                             \n",
       "2170047502  小青  120.122.110.111\n",
       "2170047503  小丽      120.144.2.1\n",
       "2170047504  小鸡     120.210.2.22"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#抽取第2行，第1、3列数据\n",
    "df3.iloc[1:4,[0,2]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.7 字典数据抽取\n",
    "将字典数据抽取为dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "字典的key和value各成一列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   0\n",
      "a  1\n",
      "b  2\n",
      "   0\n",
      "a  1\n",
      "b  2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  index  0\n",
       "0     a  1\n",
       "1     b  2"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas\n",
    "from pandas import DataFrame\n",
    "d1={'a':'1','b':'2'}\n",
    "#将字典转为DataFrame，且字典的key列变成index\n",
    "a1=pandas.DataFrame.from_dict(d1,orient='index')\n",
    "print(a1)\n",
    "#将index的列名改为key\n",
    "# a1.index.name='key'\n",
    "print(a1)\n",
    "b1=a1.reset_index()\n",
    "# b1.columns=['key','value']\n",
    "b1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "字典里每个元素作为一列（同长）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a  b\n",
       "0  1  4\n",
       "1  2  5\n",
       "2  3  6"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d2={'a':[1,2,3],'b':[4,5,6]}#字典的value必须长度一致\n",
    "a2=DataFrame(d2)\n",
    "a2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "字典里每个元素作为一列（不同长）"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>one</th>\n",
       "      <th>two</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   one  two\n",
       "0  1.0    1\n",
       "1  2.0    2\n",
       "2  3.0    3\n",
       "3  NaN    4"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#将字典的value用Series包起来可以不同长\n",
    "d={'one':pandas.Series([1,2,3]),'two':pandas.Series([1,2,3,4])}\n",
    "df4=pandas.DataFrame(d)\n",
    "df4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. 插入记录"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas没有直接指定索引的插入行的方法，所以要自行设置"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a  b  c\n",
       "0  1  a  A\n",
       "1  2  b  B\n",
       "2  3  c  C"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df=pd.DataFrame({'a':[1,2,3],'b':['a','b','c'],'c':['A','B','C']})\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.1 方法一"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1、抽取index的第1行，并将第一二三列赋值为\"--\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c\n",
       "1  --  --  --"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "line=pd.DataFrame({df.columns[0]:\"--\",df.columns[1]:\"--\",df.columns[2]:\"--\"},index=[1])\n",
    "line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c\n",
       "0   1   a   A\n",
       "1  --  --  --\n",
       "1   2   b   B\n",
       "2   3   c   C"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0=pd.concat([df.loc[:0],line,df.loc[1:]])  #写成loc[0]是错的，返回的是Series，我们要DataFrame\n",
    "df0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2、重新定义索引——reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index   a   b   c\n",
       "0      0   1   a   A\n",
       "1      1  --  --  --\n",
       "2      1   2   b   B\n",
       "3      2   3   c   C"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1=df0.reset_index()  #产生新索引\n",
    "df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3、删除原索引列"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c\n",
       "0   1   a   A\n",
       "1  --  --  --\n",
       "2   2   b   B\n",
       "3   3   c   C"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=df1.drop('index',axis=1)   #删除原索引列\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.2 方法二"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "直接对reset_index()函数添加drop=True参数，便可删除原索引并给出新的索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c\n",
       "0   1   a   A\n",
       "1  --  --  --\n",
       "2   2   b   B\n",
       "3   3   c   C"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2=pd.concat([df.loc[:0],line,df.loc[1:]]).reset_index(drop=True)\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8.3 方法三"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "先找出df0的索引长度，再利用整数序列函数生成索引：range(length)，再把生成的索引赋值给df0.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "      <td>--</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a   b   c\n",
       "0   1   a   A\n",
       "1  --  --  --\n",
       "2   2   b   B\n",
       "3   3   c   C"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0.index=range(len(df0.index))\n",
    "df0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. 修改记录"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>120.233.111.2</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>120.122.110.111</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>120.144.2.1</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>120.210.2.22</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>120.111.1.4</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>120.12.12.12</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>120.12.12.11</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>120.12.12.1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话               IP          学号\n",
       "0  小马  56456456456456    120.233.111.2  2170047501\n",
       "1  小青    123123131313  120.122.110.111  2170047502\n",
       "2  小丽   1321313123123      120.144.2.1  2170047503\n",
       "3  小鸡    465464678678     120.210.2.22  2170047504\n",
       "4  小鸭    531233546467      120.111.1.4  2170047505\n",
       "5  小鹏  13456464561232     120.12.12.12  2170047506\n",
       "6  小图   1231231231231              NaN  2170047507\n",
       "7  小猫    123131231231     120.12.12.11  2170047508\n",
       "8  小狗  12313245645646      120.12.12.1  2170047509"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "from pandas import read_excel\n",
    "df=read_excel(r'/root/brainwaveDetailNew.xls',sheet_name='Sheet1')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.1 整体替换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>11</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>32</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   名字              电话  IP          学号\n",
       "0  小马  56456456456456  11  2170047501\n",
       "1  小青    123123131313  12  2170047502\n",
       "2  小丽   1321313123123  12  2170047503\n",
       "3  小鸡    465464678678  23  2170047504\n",
       "4  小鸭    531233546467  23  2170047505\n",
       "5  小鹏  13456464561232  34  2170047506\n",
       "6  小图   1231231231231  34  2170047507\n",
       "7  小猫    123131231231  32  2170047508\n",
       "8  小狗  12313245645646   1  2170047509"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#替换整行或整列\n",
    "df['IP']=[11,12,12,23,23,34,34,32,1]\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 9.2 个别替换"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9.2.1 单值替换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>郑琳怡</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>11</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>32</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    名字              电话  IP          学号\n",
       "0  郑琳怡  56456456456456  11  2170047501\n",
       "1   小青    123123131313  12  2170047502\n",
       "2   小丽   1321313123123  12  2170047503\n",
       "3   小鸡    465464678678  23  2170047504\n",
       "4   小鸭    531233546467  23  2170047505\n",
       "5   小鹏  13456464561232  34  2170047506\n",
       "6   小图   1231231231231  34  2170047507\n",
       "7   小猫    123131231231  32  2170047508\n",
       "8   小狗  12313245645646   1  2170047509"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace('小马','郑琳怡')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9.2.2 指定列单值替换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>11</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>小鸡</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>小鸭</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>32</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>大狗狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    名字              电话  IP          学号\n",
       "0   小马  56456456456456  11  2170047501\n",
       "1   小青    123123131313  12  2170047502\n",
       "2   小丽   1321313123123  12  2170047503\n",
       "3   小鸡    465464678678  23  2170047504\n",
       "4   小鸭    531233546467  23  2170047505\n",
       "5   小鹏  13456464561232  34  2170047506\n",
       "6   小图   1231231231231  34  2170047507\n",
       "7   小猫    123131231231  32  2170047508\n",
       "8  大狗狗  12313245645646   1  2170047509"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace({'名字':'小狗'},'大狗狗')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 9.2.3 多值替换"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['名字', '电话', 'IP', '学号'], dtype='object')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace(['小狗','小猫'],['dog','cat'])\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>名字</th>\n",
       "      <th>电话</th>\n",
       "      <th>IP</th>\n",
       "      <th>学号</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>小马</td>\n",
       "      <td>56456456456456</td>\n",
       "      <td>11</td>\n",
       "      <td>2170047501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>小青</td>\n",
       "      <td>123123131313</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>小丽</td>\n",
       "      <td>1321313123123</td>\n",
       "      <td>12</td>\n",
       "      <td>2170047503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>chicken</td>\n",
       "      <td>465464678678</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>duck</td>\n",
       "      <td>531233546467</td>\n",
       "      <td>23</td>\n",
       "      <td>2170047505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>小鹏</td>\n",
       "      <td>13456464561232</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>小图</td>\n",
       "      <td>1231231231231</td>\n",
       "      <td>34</td>\n",
       "      <td>2170047507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>小猫</td>\n",
       "      <td>123131231231</td>\n",
       "      <td>32</td>\n",
       "      <td>2170047508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>小狗</td>\n",
       "      <td>12313245645646</td>\n",
       "      <td>1</td>\n",
       "      <td>2170047509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        名字              电话  IP          学号\n",
       "0       小马  56456456456456  11  2170047501\n",
       "1       小青    123123131313  12  2170047502\n",
       "2       小丽   1321313123123  12  2170047503\n",
       "3  chicken    465464678678  23  2170047504\n",
       "4     duck    531233546467  23  2170047505\n",
       "5       小鹏  13456464561232  34  2170047506\n",
       "6       小图   1231231231231  34  2170047507\n",
       "7       小猫    123131231231  32  2170047508\n",
       "8       小狗  12313245645646   1  2170047509"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace({'小鸡','小鸭'},{'chicken','duck'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "toc": {
   "base_numbering": "1",
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "目录",
   "title_sidebar": "目录",
   "toc_cell": true,
   "toc_position": {
    "height": "446px",
    "left": "1179px",
    "top": "110px",
    "width": "244px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
